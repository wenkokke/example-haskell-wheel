name: ci

on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize

  schedule:
    #        ┌───────────── minute (0 - 59)
    #        │ ┌───────────── hour (0 - 23)
    #        │ │ ┌───────────── day of the month (1 - 31)
    #        │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
    #        │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
    #        │ │ │ │ │
    #        │ │ │ │ │
    #        │ │ │ │ │
    - cron: "0 0 * * 0"
  
  workflow_dispatch:

jobs:
  test:
    name: ${{ matrix.os.name }} / GHC ${{ matrix.ghc.version }} / Python ${{ matrix.python.version }}
    runs-on: ${{ matrix.os.tag }}

    strategy:
      fail-fast: false
      matrix:
        os:
          # 01-04-2023:
          # All GitHub-hosted runners use an x86_64 architecture. If this changes,
          # the manylinux platform tags below must take this into account.
          # 03-04-2023:
          # We must specify an exact Ubuntu version, because each Ubuntu version
          # corresponds to an exact libc version, which must be passed to auditwheel,
          # as part of the manylinux tag:
          # - ubuntu-20.04 uses libc 2.31
          # - ubuntu-22.04 uses libc 2.35
          # In general, libc is FORWARDS but NOT BACKWARDS compatible, e.g., binaries
          # built against libc 2.31 can be run on a system with libc 2.35, but not the
          # other way around. You can get the libc version via Python by running:
          # ```python
          # import platform
          # print(platform.libc_ver())
          # ```
          - { tag: ubuntu-22.04, name: Linux, manylinux: manylinux_2_35_x86_64 }
          # 01-04-2023:
          # Ubuntu 20.04 has patchelf version 0.10, but the latest auditwheel
          # requires at least version 0.14.
          # - { tag: ubuntu-20.04, name: Linux, manylinux: manylinux_2_31_x86_64 }
          - { tag: macos-latest, name: macOS }
          - { tag: windows-latest, name: Windows }
        ghc:
          - { version: "9.6.1" }
          - { version: "9.4.4" }
          # 01-04-2023:
          # Compilation with GHC 9.2.7 fails because `ld` cannot find the library `HSrts`.
          # See: https://github.com/wenkokke/example-haskell-wheel/issues/1
          # - { version: "9.2.7" }
        cabal:
          - { version: "3.10.1.0" }
        python:
          - { version: "3.11", tag: "311" }
          - { version: "3.10", tag: "310" }
          - { version: "3.9", tag: "39" }
          - { version: "3.8", tag: "38" }
          - { version: "3.7", tag: "37" }

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup GHC ${{ matrix.ghc.version }}
        uses: haskell/actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc.version }}
          cabal-version: ${{ matrix.cabal.version }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}
          cache: "pip"
          cache-dependency-path: "requirements-ci.txt"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-ci.txt
        shell: sh

      - name: Build
        run: python setup.py build_ext
        shell: sh

      - name: Test
        run: pipx run tox run -e py${{ matrix.python.tag }}
        shell: sh

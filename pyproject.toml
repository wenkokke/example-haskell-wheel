[build-system]
requires = [
  "find_libpython>=0.3; sys_platform == 'win32'",
  "setuptools>=45",
  "swig>=4",
  "wheel>=0.35"
]
build-backend = "setuptools.build_meta"

[project]
name = 'example-haskell-wheel'
version = '0.1.0a5'
authors = [{ name = 'Wen Kokke', email = 'wenkokke@users.noreply.github.com' }]
description = 'An experiment in publishing a Haskell library as a Python Wheel.'
readme = 'README.md'
license = { file = 'LICENSE' }
requires-python = ">=3.7,<3.12"

[project.optional-dependencies]
test = ["pytest >=7.1,<8"]

[project.scripts]
example-haskell-wheel = "example_haskell_wheel:main"

[tool.cibuildwheel]
# 18-04-2023:
# Cross-compilation does not work with GHC and Cabal.
archs = ["native"]
build-frontend = "build"
skip = [
  # 18-04-2023:
  # PyPy builds do not work.
  "pp*",
  # 18-04-2023:
  # GHC distributions for Alpine Linux do not include dynamic builds for libraries.
  "*musllinux*"
]
test-command = "pytest {package}/tests"
test-extras = "test"

[tool.cibuildwheel.linux]
before-all = "source /etc/os-release && {package}/scripts/before-all-$ID.sh"
repair-wheel-command = [
  # Use auditwheel to repair wheels on Linux
  "auditwheel repair -w {dest_dir} {wheel}",
  # Use abi3audit to catch issues with Limited API wheels
  "pipx run abi3audit --strict --report {wheel}",
]

[tool.cibuildwheel.macos]
repair-wheel-command = [
  # Use delocate to repair wheels on macOS
  "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}",
  # Use abi3audit to catch issues with Limited API wheels
  "pipx run abi3audit --strict --report {wheel}",
]

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = [
  # Use delvewheel to repair wheels on Windows
  "delvewheel repair -w {dest_dir} {wheel}",
  # Use abi3audit to catch issues with Limited API wheels
  "pipx run abi3audit --strict --report {wheel}"
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37, py38, py39, py310, py311
isolated_build = true
skip_missing_interpreters = true

[testenv]
extras =
  test
commands =
  {envpython} -m pytest tests
"""
